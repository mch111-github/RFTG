package com.rftg.toad;

import java.sql.Timestamp;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


@Controller // This means that this class is a Controller
@RequestMapping(path="/rental") // This means URL's start with /demo (after Application path)
public class RentalController extends RentalSpecifications{
  @Autowired // This means to get the bean called FilmRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private RentalRepository rentalRepository;

  @GetMapping()
  public @ResponseBody Iterable<Rental> getAllRental() {
    // This returns a JSON or XML with the rentals
    return rentalRepository.findAll();
  }
    
  @GetMapping(path = "/{rental_id}")
  public @ResponseBody Rental getRentalById(@PathVariable Integer rental_id) {
    return rentalRepository.findById(rental_id).orElse(null);
  }

  @GetMapping("/state/etat")
public @ResponseBody List<Rental> whenSearchByStatus() {
 
     Specification<Rental> specifications = hasState("À traiter");
 
     List<Rental> states = rentalRepository.findAll(specifications);
 
     System.out.println("Serveur connecté");
     return states;
}

    @PostMapping("/save")
    public @ResponseBody Rental addNewRental(
            @RequestParam Integer inventory_id,
            @RequestParam Integer customer_id, @RequestParam Integer staff_id, @RequestParam String state) {
        Rental r = new Rental();
        r.setInventory_id(inventory_id);
        r.setCustomer_id(customer_id);
        r.setStaff_id(staff_id);
        r.setState(state);
        r = rentalRepository.save(r);
        return r;
    }

    // curl -d "inventory_id=20&customer_id=15&staff_id=2&state=EnCours" http://localhost:8080/rental/save
    
    @DeleteMapping("/delete/{rental_id}")
    public ResponseEntity<String> deleteRental(@PathVariable Integer rental_id) {
        try {
            rentalRepository.deleteById(rental_id);
            return new ResponseEntity<>("La location avec l'ID" + rental_id + " a étè supprimée", HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>("Erreur", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    // curl -X DELETE http://localhost:8080/rental/delete/{rental_id}

    @PutMapping(path = "/update")
    public @ResponseBody String update(@RequestParam String rental_id, @RequestParam String state) {
        int id = Integer.parseInt(rental_id);
        Optional<Rental> optionalRental = rentalRepository.findById(id);

        if (optionalRental.isPresent()) {
            Rental rental = optionalRental.get();

            Timestamp timestamp = new Timestamp(System.currentTimeMillis());

            rental.setState(state);
            rental.setLast_update(timestamp);
            rentalRepository.save(rental);
            return "Update successful";
        } else {
            return "Rental not found";
        }
    }
    // curl -X PUT -d "rental_id=20&state=Terminer" http://localhost:8080/rental/update
}