package com.rftg.toad;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/directors")
public class DirectorController {
    @Autowired // This means to get the bean called FilmRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private DirectorRepository directorRepository;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody String addNewDirector(@RequestParam Integer director_id, @RequestParam String firstname,
            @RequestParam String lastname, @RequestParam String nationality) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Director n = new Director();
        n.setDirector_id(director_id);
        n.setFirstname(firstname);
        n.setLastname(lastname);
        n.setNationality(nationality);
        directorRepository.save(n);
        return "Saved";
    }

    @GetMapping()
    public @ResponseBody Iterable<Director> getAllDirectors() {
        // This returns a JSON or XML with the Films
        return directorRepository.findAll();
    }

    @GetMapping(path = "/{director_id}")
    public @ResponseBody Director getDirectoryId(@PathVariable Integer director_id) {
      return directorRepository.findById(director_id).orElse(null);
    }

        @PostMapping("/save")
    public @ResponseBody Director addNewDirector(
            @RequestParam String firstname,
            @RequestParam String lastname,
            @RequestParam String nationality) {
        Director d = new Director();
        d.setFirstname(firstname);
        d.setLastname(lastname);
        d.setNationality(nationality);
        d = directorRepository.save(d);
        return d;
    }
    // curl -d "firstname=Didier&lastname=Mertencourbt&nationality=Groenland" http://localhost:8080/directors/save

    @DeleteMapping("/delete/{director_id}")
    public ResponseEntity<String> deleteDirector(@PathVariable Integer director_id) {
        try {
            directorRepository.deleteById(director_id);
            return new ResponseEntity<>("le réalisateur avec l'ID " + director_id + " a étè supprimé", HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>("Erreur", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    // curl -X DELETE http://localhost:8080/directors/delete/{director_id}


    @PutMapping(path = "/updateDirector")
    public @ResponseBody String update(@RequestParam String director_id, @RequestParam String firstname, 
    @RequestParam String lastname, @RequestParam String nationality) {
        int id = Integer.parseInt(director_id);
        Optional<Director> optionalDirector = directorRepository.findById(id);

        if (optionalDirector.isPresent()) {
            Director director = optionalDirector.get();

            director.setFirstname(firstname);
            director.setLastname(lastname);
            director.setNationality(nationality);
            directorRepository.save(director);
            return "Update successful";
        } else {
            return "Director not found";
        }
    }
}
