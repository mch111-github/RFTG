package com.rftg.toad;

import java.sql.Timestamp;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/actors") // This means URL's start with /demo (after Application path)
public class ActorController {
  @Autowired // This means to get the bean called ActorRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private ActorRepository actorRepository;

  @GetMapping()
  public @ResponseBody Iterable<Actor> getAllActors() {
    // This returns a JSON or XML with the Actors
    return actorRepository.findAll();
  }

  @GetMapping(path = "/{actor_id}")
  public @ResponseBody Actor getFilmById(@PathVariable Integer actor_id) {
    return actorRepository.findById(actor_id).orElse(null);
  }

  @PostMapping(path = "/") // Map ONLY POST Requests
  public @ResponseBody Actor addNewActor(@RequestParam String first_name,
      @RequestParam String last_name) {
    Actor n = new Actor();
    
    n.setFirst_name(first_name);
    n.setLast_name(last_name);
    Timestamp timestamp = new Timestamp(System.currentTimeMillis());

    n.setLast_update(timestamp);
    //renvoyer la structure de l'objet
    n = actorRepository.save(n);
    return n;
//curl -X POST -d "first_name=FURKAN&last_name=BILICAN" http://localhost:8080/actors/
  }

  @PutMapping(path = "/updateStatus/{actor_id}")
    public @ResponseBody Actor updateActorStatus(@PathVariable Integer actor_id, @RequestParam String last_name, String first_name) {
        Actor existingActor = actorRepository.findById(actor_id).orElse(null);

        if (existingActor != null) {
            existingActor.setLast_name(last_name);
            existingActor.setFirst_name(first_name);
            actorRepository.save(existingActor);
            return existingActor;
        } else {
            return null;
        }
    }
    //curl -X PUT -d "last_name=Manceau&first_name=Alexandre" http://localhost:8080/actors/updateStatus/1

    @DeleteMapping(path = "/")
  public @ResponseBody String deleteActor(@RequestParam Integer actor_id) {
      Optional<Actor> actorToDelete = actorRepository.findById(actor_id);
  
      if (actorToDelete.isPresent()) {
          actorRepository.delete(actorToDelete.get());
          return "L'acteur avec l'id " + actor_id + " est supprimé";
      } else {
          return "L'acteur avec l'id " + actor_id + " n'a pas été trouvé";
      }
  }
  //curl -X DELETE http://localhost:8080/actors/?actor_id={actor_id}

}